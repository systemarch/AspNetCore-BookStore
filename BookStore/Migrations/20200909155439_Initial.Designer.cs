// <auto-generated />
using System;
using BookStore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.Migrations
{
    [DbContext(typeof(BookStoreContext))]
    [Migration("20200909155439_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(168)")
                        .HasMaxLength(168);

                    b.Property<byte[]>("PhotoImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhotoImageType")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.HasKey("AuthorId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Author_Name");

                    b.HasIndex("Website")
                        .IsUnique()
                        .HasFilter("([Website] IS NOT NULL)");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("BookStore.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("CoverImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CoverImageType")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownloadLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<bool>("IsMature")
                        .HasColumnType("bit");

                    b.Property<string>("Isbn10")
                        .HasColumnName("ISBN10")
                        .HasColumnType("char(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Isbn13")
                        .IsRequired()
                        .HasColumnName("ISBN13")
                        .HasColumnType("char(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("TotalPages")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookLanguageId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DownloadLink")
                        .IsUnique()
                        .HasName("AK_Book_DownloadLink");

                    b.HasIndex("Isbn10")
                        .IsUnique()
                        .HasName("AK_Book_ISBN10")
                        .HasFilter("[ISBN10] IS NOT NULL");

                    b.HasIndex("Isbn13")
                        .IsUnique()
                        .HasName("AK_Book_ISBN13");

                    b.HasIndex("PublisherId");

                    b.HasIndex("Title", "Subtitle", "AuthorId")
                        .IsUnique()
                        .HasName("AK_Book_TitleSubtitleAuthorId")
                        .HasFilter("[Title] IS NOT NULL AND [Subtitle] IS NOT NULL");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookStore.Models.BookLanguage", b =>
                {
                    b.Property<int>("BookLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("BookLanguageId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("AK_BookLanguage_Code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_BookLanguage_Name");

                    b.ToTable("BookLanguage");
                });

            modelBuilder.Entity("BookStore.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Category_Name");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BookStore.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("PublisherId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Publisher_Name");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("BookStore.Models.Book", b =>
                {
                    b.HasOne("BookStore.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Book__AuthorId__73BA3083")
                        .IsRequired();

                    b.HasOne("BookStore.Models.BookLanguage", "BookLanguage")
                        .WithMany("Books")
                        .HasForeignKey("BookLanguageId")
                        .HasConstraintName("FK__Book__BookLangua__76969D2E")
                        .IsRequired();

                    b.HasOne("BookStore.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Book__CategoryId__75A278F5")
                        .IsRequired();

                    b.HasOne("BookStore.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("FK__Book__PublisherI__74AE54BC")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
